{"version":3,"sources":["logo.svg","routes/Home.js","routes/Register.js","routes/Login.js","routes/CreateTeam.js","routes/MainApp/Teams.js","routes/MainApp/containers/InviteToChannelModal.js","routes/MainApp/Header.js","routes/MainApp/Messages.js","routes/MainApp/Channels.js","routes/MainApp/containers/AddChannelForm.js","routes/MainApp/AddChannelModal.js","routes/MainApp/containers/InviteToTeamModal.js","routes/MainApp/containers/Sidebar.js","routes/MainApp/containers/SendMessage.js","routes/MainApp/index.js","routes/JoinTeam.js","App.js","index.js"],"names":["module","exports","helloQuery","gql","Home","graphql","data","loading","hello","RegisterComponent","state","uname","email","passw","onSubmit","a","props","mutate","variables","response","console","log","onChange","e","target","name","value","setState","this","Container","text","Header","as","Input","placeholder","fluid","type","Button","onClick","primary","React","Component","registerMutation","Register","LoginComponent","login","localStorage","setItem","token","loginMutation","Login","CreateTeamComponent","history","push","getItem","createTeamMutation","CreateTeam","TeamWrapper","styled","div","TeamList","ul","TeamListItem","li","team","id","letter","to","key","Teams","teams","map","InviteToChannelModalComponent","users","document","getElementById","split","channelid","Modal","trigger","Icon","size","content","Content","inviteToChannelMutation","InviteToChannelModal","HeaderWrapper","channelName","MessagesWrapper","newChannelMessageSubscription","MessagesComponent","subscribe","subscribeToMore","updateQuery","prev","subscriptionData","newMessage","getMessages","forceUpdate","unsub","Fragment","className","m","Comment","Group","Avatar","src","Author","Text","messgesQuery","Messages","options","ChannelWrapper","TeamNameHeader","h1","SideBarList","SideBarListItem","SideBarListHeader","PushLeft","Green","span","Bubble","on","Channel","teamId","user","teamName","channels","addChannelHandler","openInviteModal","c","AddPublicChannelComponent","teamid","res","createPublicChannelMutation","AddPublicChannel","AddPrivateChannelComponent","usersUnsplit","createPrivateChannelMutation","AddPrivateChannel","AddChannelForm","args","private","AddChannelModal","onPrivateChange","checked","open","onClose","Checkbox","label","InviteToTeamModalComponent","inviteToTeamMutation","InviteToTeamModal","SidebarComponent","openAddChannelModal","closeAddChannelModal","closeInviteModal","channel","teamIdx","currentTeamId","findIndex","getTeams","channelIdx","currentChannelId","r","channelIdHandler","username","decode","t","charAt","toUpperCase","Channels","teamQuery","SendMessage","style","width","bottom","secondary","sendMessageMutation","AppLayout","match","params","Sidebar","JoinTeamComponent","joinTeamMutation","JoinTeam","App","exact","path","component","httpLink","createHttpLink","uri","httpLinkWithMiddleware","setContext","headers","concat","wsLink","WebSocketLink","reconnect","link","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render"],"mappings":"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","file":"static/js/main.2e44575e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport gql from \"graphql-tag\"\r\nimport { graphql } from \"react-apollo\";\r\n\r\nconst HomeComponent = ({ data: {loading, hello} }) => loading ? null : (\r\n    <h1>{hello}</h1>\r\n)\r\n\r\n\r\nconst helloQuery = gql`\r\n    {\r\n        hello\r\n    }\r\n`\r\n\r\nexport const Home =  graphql(helloQuery)(HomeComponent)\r\n\r\n","import React from 'react';\r\nimport { Button, Input, Container, Header } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nexport class RegisterComponent extends React.Component {\r\n  state = {\r\n    uname: '',\r\n    email: '',\r\n    passw: '',\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    const response = await this.props.mutate({\r\n      variables: this.state,\r\n    });\r\n\r\n    console.log(response)\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    // name = \"email\";\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { uname, email, passw } = this.state;\r\n\r\n    return (\r\n      <Container text><br></br>\r\n        <Header as=\"h2\">Register</Header>\r\n        <Input\r\n          name=\"uname\"\r\n          onChange={this.onChange}\r\n          value={uname}\r\n          placeholder=\"Username\"\r\n          fluid\r\n        /><br></br>\r\n        <Input name=\"email\" onChange={this.onChange} value={email} placeholder=\"Email\" fluid /><br></br>\r\n        <Input\r\n          name=\"passw\"\r\n          onChange={this.onChange}\r\n          value={passw}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          fluid\r\n        /><br></br>\r\n        <Button onClick={this.onSubmit} primary>Submit</Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst registerMutation = gql`\r\n  mutation($uname: String!, $email: String!, $passw: String!) {\r\n    createUser(uname: $uname, email: $email, passw: $passw)\r\n  }\r\n`;\r\n\r\n\r\nexport const Register = graphql(registerMutation)(RegisterComponent)","import React from 'react';\r\nimport { Button, Input, Container, Header } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\nexport class LoginComponent extends React.Component {\r\n  state = {\r\n    uname: '',\r\n    passw: '',\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    const response = await this.props.mutate({\r\n      variables: this.state,\r\n    });\r\n\r\n    if(response.data.login){\r\n      localStorage.setItem(\"auth\", response.data.login.token)\r\n    }\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { uname, passw } = this.state;\r\n\r\n    return (\r\n      <Container text><br></br>\r\n        <Header as=\"h2\">Login</Header>\r\n        <Input\r\n          name=\"uname\"\r\n          onChange={this.onChange}\r\n          value={uname}\r\n          placeholder=\"Username\"\r\n          fluid\r\n        /><br></br>\r\n        <Input\r\n          name=\"passw\"\r\n          onChange={this.onChange}\r\n          value={passw}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          fluid\r\n        /><br></br>\r\n        <Button onClick={this.onSubmit} primary>Submit</Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst loginMutation = gql`\r\n  mutation($uname: String!, $passw: String!) {\r\n    login(uname: $uname, passw: $passw){\r\n        token\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const Login = graphql(loginMutation)(LoginComponent)\r\n","import React from 'react';\r\nimport { Button, Input, Container, Header } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nexport class CreateTeamComponent extends React.Component {\r\n  state = {\r\n    name:\"\"\r\n  };\r\n\r\n  onSubmit = async () => {\r\n    let response;\r\n    try{\r\n      response = await this.props.mutate({\r\n        variables: this.state,\r\n      });\r\n    }catch(e){\r\n      this.props.history.push(\"/login\")\r\n    }\r\n\r\n    console.log(response)\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    if(!localStorage.getItem(\"auth\")){\r\n        this.props.history.push(\"/login\")\r\n    }\r\n    \r\n    const { name } = this.state;\r\n\r\n    return (\r\n      <Container text><br></br>\r\n        <Header as=\"h2\">Create Team</Header>\r\n        <Input\r\n          name=\"name\"\r\n          onChange={this.onChange}\r\n          value={name}\r\n          placeholder=\"Name\"\r\n          fluid\r\n        /><br></br>\r\n        <Button onClick={this.onSubmit} primary>Submit</Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst createTeamMutation = gql`\r\n  mutation($name: String) {\r\n    createTeam(name: $name){\r\n      owner\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const CreateTeam = graphql(createTeamMutation)(CreateTeamComponent)","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TeamWrapper = styled.div`\r\n  grid-column: 1;\r\n  grid-row: 1 / 4;\r\n  background-color: #362234;\r\n  color: #958993;\r\n`;\r\n\r\nconst TeamList = styled.ul`\r\n  width: 100%;\r\n  padding-left: 0px;\r\n  list-style: none;\r\n`;\r\n\r\nconst TeamListItem = styled.li`\r\n  height: 50px;\r\n  width: 50px;\r\n  background-color: #676066;\r\n  color: #fff;\r\n  margin: auto;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 24px;\r\n  border-radius: 11px;\r\n  &:hover {\r\n    border-style: solid;\r\n    border-width: thick;\r\n    border-color: #767676;\r\n  }\r\n`;\r\n\r\nconst team = ({ id, letter }) => <Link to={`/view-team/${id}`} key={id}><TeamListItem key={`team-${id}`}>{letter}</TeamListItem></Link>;\r\n\r\n\r\nexport default class Teams extends React.Component {\r\n  render() {\r\n    return (\r\n      <TeamWrapper>\r\n        <br></br>\r\n        <TeamList>\r\n          {this.props.teams.map(team)}\r\n        </TeamList>\r\n      </TeamWrapper>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button, Header, Icon, Modal, Input, Checkbox, Container } from 'semantic-ui-react';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nclass InviteToChannelModalComponent extends Component {\r\n    render() {\r\n        return (\r\n            <Modal trigger={<Icon name=\"user plus\" size=\"large\"></Icon>}>\r\n                <Header content='Invite People To Channel' />\r\n                <Modal.Content>\r\n                    <Container text>\r\n                        <Input placeholder=\"Users\" id='users'></Input><br></br><br></br>\r\n                        <Button onClick={this.onSubmit}>Submit</Button>\r\n                    </Container>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n    onSubmit = async () => {\r\n        var users = document.getElementById(\"users\").value.split(\", \");\r\n        var channelid = this.props.channelid;\r\n\r\n        console.log(await this.props.mutate({\r\n            variables:{\r\n                users,\r\n                channelid\r\n            }\r\n        }))\r\n        \r\n\r\n    }\r\n    \r\n}\r\n\r\nconst inviteToChannelMutation = gql`\r\n    mutation ($channelid:String, $users:[String]) {\r\n        inviteToChannel(users:$users, channelid:$channelid)\r\n    }\r\n`\r\n\r\nconst InviteToChannelModal = graphql(inviteToChannelMutation)(InviteToChannelModalComponent)\r\n\r\nexport default InviteToChannelModal\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Header, Icon } from 'semantic-ui-react'\r\nimport InviteToChannelModal from './containers/InviteToChannelModal';\r\n\r\nvar HeaderWrapper = styled.div`\r\n    grid-column: 3;\r\n    grid-row: 1;\r\n    color: #333;\r\n    border-bottom: 1px solid #f2f2f2;\r\n    text-align: center;\r\n`\r\n\r\nexport default ({channelName, channelid}) => (\r\n    <HeaderWrapper>\r\n        <Header>#{channelName}</Header>\r\n        <InviteToChannelModal channelid={channelid} />\r\n    </HeaderWrapper>\r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { Comment } from \"semantic-ui-react\";\r\n\r\nimport \"./main.css\";\r\n\r\nvar MessagesWrapper = styled.div`\r\n    grid-column: 3;\r\n    grid-row: 2;\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    overflow-y: auto\r\n`\r\n\r\n\r\nconst newChannelMessageSubscription = gql`\r\n  subscription($channelid: String) {\r\n    newMessage(channelid: $channelid) {\r\n      text\r\n      uname\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nclass MessagesComponent extends React.Component {\r\n    componentDidMount() {\r\n        this.unsub = this.subscribe(this.props.channelid)\r\n    }\r\n    componentWillReceiveProps({ channelid }){\r\n        if(this.props.channelid !== channelid){\r\n            if(this.unsub){\r\n                this.unsub()\r\n            }\r\n\r\n            this.unsub = this.subscribe(channelid)\r\n        }\r\n    }\r\n    subscribe = channelid => \r\n        this.props.data.subscribeToMore({\r\n            document: newChannelMessageSubscription,\r\n            variables: {\r\n                channelid,\r\n            },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                console.log(subscriptionData)\r\n\r\n                if (!subscriptionData) {\r\n                    return prev;\r\n                }\r\n                var newMessage = subscriptionData.data.newMessage\r\n\r\n                this.props.data.getMessages.push(newMessage)\r\n\r\n                this.forceUpdate()\r\n            },\r\n        });\r\n    \r\n\r\n    render() {\r\n        if(this.props.data.loading){\r\n            return null\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <MessagesWrapper>\r\n                <ul className='message-list'>\r\n                    {this.props.data.getMessages.map(m => (\r\n                        <div key={`m-${m.id}`}>\r\n                        <li>\r\n                            <Comment.Group key={m.id}>\r\n                                <Comment>\r\n                                    <Comment.Avatar src='slack-img.jpeg' />\r\n                                    <Comment.Content>\r\n                                        <Comment.Author as=\"a\">{m.uname}</Comment.Author>\r\n                                        <Comment.Text>{m.text}</Comment.Text>\r\n                                    </Comment.Content>\r\n                                </Comment>\r\n                            </Comment.Group>\r\n                        </li>\r\n                        </div>\r\n                    ))}\r\n                </ul>\r\n                </MessagesWrapper>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nvar messgesQuery = gql`\r\n    query ($channelid: String){\r\n        getMessages(channelid:$channelid){\r\n            id\r\n            text\r\n            uname\r\n            channelid\r\n        }\r\n    }\r\n`\r\n\r\nvar Messages = graphql(messgesQuery, {\r\n    options:({ channelid }) => ({\r\n        variables: { channelid }\r\n    })\r\n})(MessagesComponent)\r\n\r\n\r\nexport default Messages;","// import React from 'react';\r\n// import styled from 'styled-components';\r\n// import '../slack.css';\r\n\r\n// const ChannelWrapper = styled.div`\r\n//     grid-column: 2;\r\n//     grid-row: 1 / 4;\r\n//     background-color: #52364E;\r\n//     color: #958993;\r\n// `\r\n\r\n// const channel = ({id, name}) => {\r\n//     return <li key={`channel-${id}`}>{name}</li>\r\n// }\r\n// const user = ({id, name}) => {\r\n//     return <li key={`user-${id}`}>#{name}</li>\r\n// }\r\n\r\n// export default ({teamName, uname, channels, users}) => (\r\n//     <ChannelWrapper>\r\n//         <div>\r\n//             {teamName}\r\n//             <br></br>\r\n//             {uname}\r\n//         </div><br></br>\r\n//         <ul>\r\n//             <li>Channels</li>\r\n//             {channels.map(channel)}\r\n//             <br></br>\r\n//             <li>Direct Messages</li>\r\n//             {users.map(user)}\r\n//         </ul>\r\n//     </ChannelWrapper>\r\n// )\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ChannelWrapper = styled.div`\r\n  grid-column: 2;\r\n  grid-row: 1 / 4;\r\n  background-color: #4e3a4c;\r\n  color: #958993;\r\n`;\r\n\r\nconst TeamNameHeader = styled.h1`\r\n  color: #fff;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst SideBarList = styled.ul`\r\n  width: 100%;\r\n  list-style: none;\r\n  padding-left: 0px;\r\n`;\r\n\r\nconst paddingLeft = 'padding-left: 10px';\r\n\r\nconst SideBarListItem = styled.li`\r\n  padding: 2px;\r\n  ${paddingLeft};\r\n  &:hover {\r\n    background: #3e313c;\r\n  }\r\n`;\r\n\r\nconst SideBarListHeader = styled.li`${paddingLeft};`;\r\n\r\nconst PushLeft = styled.div`${paddingLeft};`;\r\n\r\nconst Green = styled.span`color: #38978d;`;\r\n\r\nconst Bubble = ({ on = true }) => (on ? <Green>●</Green> : '○');\r\n\r\nconst Channel = ({ id, name, teamId }) => <Link to={`/view-team/${teamId}/${id}`}><SideBarListItem key={`channel-${id}`}># {name}</SideBarListItem></Link>;\r\n\r\nconst user = ({ id, name }) => (\r\n  <SideBarListItem key={`user-${id}`}>\r\n    <Bubble /> {name}\r\n  </SideBarListItem>\r\n);\r\n\r\nexport default ({\r\n  teamName, uname, channels, users, teamId, addChannelHandler, openInviteModal\r\n}) => (\r\n  <ChannelWrapper>\r\n    <PushLeft>\r\n      <br></br>\r\n      <TeamNameHeader>{teamName}</TeamNameHeader>\r\n      {uname}\r\n    </PushLeft>\r\n    <div>\r\n      <SideBarList>\r\n<SideBarListHeader>Channels <Icon name=\"add circle\" onClick={addChannelHandler}></Icon></SideBarListHeader>\r\n        {channels.map(c => (\r\n          <Channel id={c.id} name={c.name} teamId={teamId} key={`channel=${c.id}`}/>\r\n        ))}\r\n      </SideBarList>\r\n    </div>\r\n    <div>\r\n      <SideBarList>\r\n        <SideBarListHeader>Direct Messages</SideBarListHeader>\r\n        {users.map(user)}\r\n        <br></br>\r\n        <a onClick={openInviteModal}><Icon name=\"user circle\"/>Invite People</a>\r\n      </SideBarList>\r\n    </div>\r\n  </ChannelWrapper>\r\n);\r\n","import React, { Component } from 'react'\r\nimport { Input, Header, Button } from \"semantic-ui-react\";\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nclass AddPublicChannelComponent extends Component {\r\n    onSubmit=async () => {\r\n        var data = {name:document.getElementById(\"name\").value, teamid:this.props.teamid}\r\n        var res = this.props.mutate({\r\n            variables:data\r\n        })\r\n        console.log(res)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header>Public Channel</Header>\r\n                <Input placeholder=\"Channel Name\" id=\"name\"/><br></br><br></br>\r\n                <Button onClick={this.onSubmit} primary>Create</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nvar createPublicChannelMutation = gql`\r\n    mutation($teamid:String, $name:String){\r\n        createPublicChannel(teamid:$teamid, name:$name)\r\n    }\r\n`\r\n\r\nvar AddPublicChannel = graphql(createPublicChannelMutation)(AddPublicChannelComponent)\r\n\r\nclass AddPrivateChannelComponent extends Component {\r\n    onSubmit=async () => {\r\n        var usersUnsplit = document.getElementById(\"users\").value;\r\n        var users;\r\n        if(usersUnsplit === \"\"){\r\n            users = []\r\n        }else{\r\n            users = usersUnsplit.split(\", \")\r\n        }\r\n        var data = {name:document.getElementById(\"name\").value, teamid:this.props.teamid, users}\r\n        var res = this.props.mutate({\r\n            variables:data\r\n        })\r\n        console.log(res)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header>Private Channel</Header>\r\n                <Input placeholder=\"Channel Name\" id=\"name\"/><br></br><br></br>\r\n                <Input placeholder=\"Users\" id=\"users\"/><br></br><br></br>\r\n                <Button onClick={this.onSubmit} primary>Create</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nvar createPrivateChannelMutation = gql`\r\n    mutation($teamid:String, $name:String, $users:[String]){\r\n        createPrivateChannel(teamid:$teamid, name:$name, users:$users)\r\n    }\r\n`\r\n\r\nvar AddPrivateChannel = graphql(createPrivateChannelMutation)(AddPrivateChannelComponent)\r\n\r\nexport default function AddChannelForm(args) {\r\n    if(args.private){\r\n        return (\r\n            <AddPrivateChannel teamid={args.teamid} />\r\n        )\r\n    }\r\n    \r\n    if(!args.private){\r\n        return (\r\n            <AddPublicChannel teamid={args.teamid}/>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button, Header, Icon, Modal, Input, Checkbox } from 'semantic-ui-react'\r\nimport AddChannelForm from './containers/AddChannelForm';\r\n\r\nexport default class AddChannelModal extends Component {\r\n    state={\r\n        private:true\r\n    }\r\n    onPrivateChange=async (e) => {\r\n        this.setState({ private:e.target.checked })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal open={this.props.open} size='small' onClose={this.props.onClose}>\r\n                <Header content='Create A Channel' />\r\n                <Modal.Content>\r\n                    <Checkbox label=\"Private\" id=\"private\" onChange={this.onPrivateChange} checked={this.state.private}/><hr></hr>\r\n                    <AddChannelForm private={this.state.private} teamid={this.props.teamid}/>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button, Header, Icon, Modal, Input, Checkbox, Container } from 'semantic-ui-react';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nclass InviteToTeamModalComponent extends Component {\r\n    render() {\r\n        return (\r\n            <Modal open={this.props.open} size='small' onClose={this.props.onClose}>\r\n                <Header content='Invite People To Team' />\r\n                <Modal.Content>\r\n                    <Container text>\r\n                        <Input placeholder=\"Users\" id='users'></Input>\r\n                        <Button onClick={this.onSubmit}>Submit</Button>\r\n                    </Container>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n    onSubmit = () => {\r\n        var users = document.getElementById(\"users\").value.split(\", \");\r\n        var teamid = this.props.teamid;\r\n\r\n        this.props.mutate({variables:{users, teamid}})\r\n\r\n    }\r\n    \r\n}\r\n\r\nconst inviteToTeamMutation = gql`\r\n    mutation ($teamid:String, $users:[String]) {\r\n        inviteToTeam(unames:$users, teamid:$teamid)\r\n    }\r\n`\r\n\r\nconst InviteToTeamModal = graphql(inviteToTeamMutation)(InviteToTeamModalComponent)\r\n\r\nexport default InviteToTeamModal\r\n","import React, { Component } from 'react'\r\nimport Teams from '../Teams';\r\nimport Channels from '../Channels';\r\nimport \"./sidebar.css\";\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { findIndex } from \"lodash\";\r\nimport { decode } from \"jsonwebtoken\";\r\nimport AddChannelModal from '../AddChannelModal';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button } from 'semantic-ui-react';\r\nimport InviteToTeamModal from './InviteToTeamModal'\r\n\r\nexport class SidebarComponent extends Component {\r\n    state={\r\n        openAddChannelModal:false,\r\n        openInviteModal:false\r\n    }\r\n    addChannelHandler = () => {\r\n        this.setState({ openAddChannelModal:true })\r\n    }\r\n    openInviteModal = () => {\r\n        this.setState({ openInviteModal:true })\r\n    }\r\n    closeAddChannelModal = () => {\r\n        this.setState({ openAddChannelModal:false })\r\n    }\r\n    closeInviteModal = () => {\r\n        this.setState({ openInviteModal:false })\r\n    }\r\n    render() {\r\n        if(this.props.data.loading){\r\n            return null;\r\n        }\r\n        var team = {};\r\n        var channel = {};\r\n        try{\r\n            const teamIdx = this.props.currentTeamId ? findIndex(this.props.data.getTeams, [\"id\", this.props.currentTeamId]) : 0\r\n            team = this.props.data.getTeams[teamIdx]\r\n            console.log(this.props.data.getTeams)\r\n\r\n            const channelIdx = this.props.currentChannelId ? findIndex(team.channels, [\"id\", this.props.currentChannelId]) : 0\r\n            channel = team.channels[channelIdx]\r\n        }\r\n\r\n        catch(r){\r\n            return <Redirect to={`/view-team-error`} />\r\n        }\r\n\r\n        if(!this.props.currentTeamId || !this.props.currentChannelId){\r\n            return <Redirect to={`/view-team/${team.id}/${channel.id}`} />\r\n        }\r\n\r\n        this.props.channelIdHandler(channel)\r\n\r\n        let username = \"\";\r\n        try{\r\n            const token = localStorage.getItem(\"auth\")\r\n            const { uname }  = decode(token)\r\n            username = uname\r\n        }catch(e){}\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Teams\r\n                    teams={\r\n                        this.props.data.getTeams.map(t => ({\r\n                            id: t.id,\r\n                            letter: t.name.charAt(0).toUpperCase()\r\n                        }))\r\n                    }\r\n                ></Teams>\r\n                <Channels\r\n                    uname={\r\n                        username\r\n                    }\r\n                    channels={\r\n                        team.channels\r\n                    }\r\n                    users={\r\n                        [\r\n                            { id:1, name:\"slackbot\" },\r\n                            { id:2, name:\"Joe\" }\r\n                        ]\r\n                    }\r\n                    teamName={team.name}\r\n                    teamId={team.id}\r\n                    addChannelHandler={this.addChannelHandler}\r\n                    openInviteModal={this.openInviteModal}\r\n                ></Channels>\r\n                <AddChannelModal open={this.state.openAddChannelModal} onClose={this.closeAddChannelModal} key=\"sidebar-add-channel-modal\" teamid={team.id}/>\r\n                <InviteToTeamModal open={this.state.openInviteModal} onClose={this.closeInviteModal} teamid={team.id}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nvar teamQuery = gql`\r\n{\r\n    getTeams{\r\n        name\r\n        id\r\n        owner\r\n        channels{\r\n            name\r\n            id\r\n            users\r\n            teamid\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport default graphql(teamQuery)(SidebarComponent)","import React, { Component } from 'react';\r\nimport { Input, Button } from \"semantic-ui-react\";\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nclass SendMessage extends Component {\r\n    state={\r\n        text:\"\"\r\n    }\r\n    onChange=(e) => {\r\n        const { name, value } = e.target;\r\n\r\n        this.setState({\r\n            text:value\r\n        })\r\n\r\n    }\r\n    onSubmit=async () => {\r\n        var response = await this.props.mutate({\r\n            variables:{\r\n                text:this.state.text,\r\n                channelid:this.props.channel.id\r\n            }\r\n        })\r\n\r\n        document.getElementById(\"text\").value=\"\"\r\n    }\r\n    render() {\r\n        let styles = {\r\n            width: '80%',\r\n            bottom: '2%',\r\n        };\r\n        \r\n        return (\r\n            <div className=\"box\">\r\n                <Input \r\n                    type='text'\r\n                    style={styles}\r\n                    placeholder={`Message #${this.props.channel.name}`}\r\n                    name=\"text\"\r\n                    onChange={this.onChange}\r\n                    id=\"text\"\r\n                />\r\n                <Button secondary onClick={this.onSubmit}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nvar sendMessageMutation = gql`\r\n    mutation($text:String, $channelid:String){\r\n        createMessage(text:$text, channelid:$channelid)\r\n    }\r\n`\r\n\r\nexport default graphql(sendMessageMutation)(SendMessage)","import React, { Component } from 'react'\r\nimport Teams from './Teams';\r\nimport Header from './Header';\r\nimport Messages from './Messages';\r\nimport Channels from './Channels';\r\nimport { Input, Button } from \"semantic-ui-react\";\r\nimport \"./main.css\";\r\nimport Sidebar from './containers/Sidebar';\r\nimport { findIndex } from \"lodash\";\r\nimport SendMessage from './containers/SendMessage';\r\n\r\n\r\n\r\nexport class AppLayout extends Component {\r\n    state = {\r\n        channel:{\r\n            name:\"general\",\r\n            id: this.props.match.params.channelid\r\n        }\r\n    }\r\n\r\n    channelIdHandler = (channel) => {\r\n        this.setState({ channel: channel })\r\n    }\r\n    render() {\r\n        if(!localStorage.getItem(\"auth\")){\r\n            this.props.history.push(\"/login\")\r\n        }\r\n\r\n        var channelid = this.props.match.params.channelid;\r\n\r\n        \r\n        return (\r\n            <div>\r\n                <div className='app-layout'>\r\n                    <Sidebar currentTeamId={this.props.match.params.teamid} currentChannelId={channelid} channelIdHandler={this.channelIdHandler}></Sidebar>\r\n                    <Header channelName={this.state.channel.name} channelid={this.state.channel.id}></Header>\r\n                    <Messages channelid={this.state.channel.id}></Messages>\r\n                    <SendMessage channel={this.state.channel} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Button, Input, Container, Header } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { graphql } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nexport class JoinTeamComponent extends React.Component {\r\n  state = {\r\n    teamid:\"\"\r\n  };\r\n\r\n  onSubmit = async () => {\r\n      this.props.mutate({\r\n          variables:this.state\r\n      })\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    if(!localStorage.getItem(\"auth\")){\r\n        this.props.history.push(\"/login\")\r\n    }\r\n    \r\n\r\n    const { teamid } = this.state;\r\n\r\n    return (\r\n      <Container text><br></br>\r\n        <Header as=\"h2\">Join A Team</Header>\r\n        <Input\r\n          name=\"teamid\"\r\n          onChange={this.onChange}\r\n          value={teamid}\r\n          placeholder=\"Team Code\"\r\n          fluid\r\n        /><br></br>\r\n        <Button onClick={this.onSubmit} primary>Join</Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst joinTeamMutation = gql`\r\n  mutation($teamid: String) {\r\n    joinTeam(teamid: $teamid)\r\n  }\r\n`;\r\n\r\n\r\nexport const JoinTeam = graphql(joinTeamMutation)(JoinTeamComponent)","import React from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Home } from \"./routes/Home\";\nimport { Register } from './routes/Register';\nimport { Login } from './routes/Login';\nimport { CreateTeam } from \"./routes/CreateTeam\";\nimport { AppLayout } from \"./routes/MainApp/index\";\nimport { JoinTeam } from './routes/JoinTeam';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/create-team\" component={CreateTeam} />\n        <Route path=\"/view-team/:teamid?/:channelid?\" component={AppLayout} />\n        <Route path=\"/join-team\" component={JoinTeam} />\n        <Route path=\"/view-team-error\" component={() => \"You have no teams\"}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport { setContext } from 'apollo-link-context';\nimport { split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\nconst httpLink = createHttpLink({ uri: 'http://localhost:8080/graphql' });\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'token': localStorage.getItem('auth'),\n  },\n}));\n\nconst httpLinkWithMiddleware = middlewareLink.concat(httpLink);\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:8080/graphql',\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLinkWithMiddleware,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nvar Main = () => (\n    <ApolloProvider client={client}>\n        <App></App>\n    </ApolloProvider>\n)\n\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}